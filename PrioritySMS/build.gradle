buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://download.crashlytics.com/maven' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
  }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'android'

def isRelease = Boolean.valueOf(System.getProperty("release", "false"))
if (isRelease) {
  apply plugin: 'crashlytics'
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url 'http://download.crashlytics.com/maven' }
}

dependencies {
  compile fileTree(dir: 'libs', include: '*.jar')

  compile 'com.android.support:support-v4:19.0.+'
  compile 'com.google.guava:guava:13.0.+'

  compile 'com.crashlytics.android:crashlytics:1.+'

  compile 'com.jakewharton:butterknife:3.0.+'
  compile 'com.nineoldandroids:library:2.4.+'
  compile 'com.actionbarsherlock:actionbarsherlock:4.4.+@aar'
  compile 'com.viewpagerindicator:library:2.4.+@aar'

  compile ('de.keyboardsurfer.android.widget:crouton:1.8') {
    exclude (module: 'support-v4')
  }

  compile 'net.sebastianopoggi:glowpadbackport:1.0.0-SNAPSHOT@aar'
  compile 'org.jraf:android-switch-backport:1.0.1-SNAPSHOT@aar'
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.3'

  defaultConfig {
    minSdkVersion 8
    targetSdkVersion 19

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
  }

  signingConfigs {
    // This won't compile without a value for these properties even if we're compiling debug.
    // Fill it with a bogus string.
    def defaultProperty = "."

    property {
      storeFile file(System.getProperty("keystore", defaultProperty))
      storePassword System.getProperty("keystore-password", defaultProperty)
      keyAlias System.getProperty("key-alias", defaultProperty)
      keyPassword System.getProperty("key-password", defaultProperty)
    }
  }

  buildTypes {
    debug {
      packageNameSuffix '.dev'
      versionNameSuffix '-dev'
    }
    dogfood {
      packageNameSuffix '.woof'
      versionNameSuffix '-woof'

      if (isRelease) {
        signingConfig signingConfigs.property
      }
    }
    release {
      if (isRelease) {
        signingConfig signingConfigs.property
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}
