buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://download.crashlytics.com/maven' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.2.3'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.14.7'
  }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'

def isRelease = Boolean.valueOf(System.getProperty("release", "false"))
if (isRelease) {
  apply plugin: 'crashlytics'
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url 'http://download.crashlytics.com/maven' }
}

dependencies {
  compile fileTree(dir: 'libs', include: '*.jar')

  compile 'com.android.support:support-v4:22.2.0'

  compile 'com.crashlytics.android:crashlytics:1.1.13'

  compile 'com.jakewharton:butterknife:7.0.1'
  compile 'com.nineoldandroids:library:2.4.0'
  compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
  compile 'fr.baloomba:viewpagerindicator:2.4.2@aar'
  compile 'net.frakbot.glowpadbackport:glowpadbackport:2.1.0@aar'
  compile('de.keyboardsurfer.android.widget:crouton:1.8.5@aar') {
    exclude group: 'com.google.android', module: 'support-v4'
  }

  compile 'org.jraf:android-switch-backport:1.0.1-SNAPSHOT@aar'
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
  compileSdkVersion 22
  buildToolsVersion '22.0.1'

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion 22

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
  }

  signingConfigs {
    // This won't compile without a value for these properties even if we're compiling debug.
    // Fill it with a bogus string.
    def defaultProperty = "."

    property {
      storeFile file(System.getProperty("keystore", defaultProperty))
      storePassword System.getProperty("keystore-password", defaultProperty)
      keyAlias System.getProperty("key-alias", defaultProperty)
      keyPassword System.getProperty("key-password", defaultProperty)
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.dev'
      versionNameSuffix '-dev'
    }
    dogfood {
      applicationIdSuffix '.woof'
      versionNameSuffix '-woof'

      if (isRelease) {
        signingConfig signingConfigs.property
      }
    }
    release {
      if (isRelease) {
        signingConfig signingConfigs.property
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}
